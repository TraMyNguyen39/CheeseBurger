@page
@model SyncRevenueModel
@using System.Web
@{
    ViewData["Title"] = "SyncRevenue";
    int cnt = 0;
}
<link rel="stylesheet" href="~/css/sync-revenue.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>

<div class="main__information row">
    <div class="main__information-detail col-8" style="margin-top: 30px; margin-bottom: 30px;">
        <div class="main__table-form d-flex align-items-end">
            <div class="select__form col-6 ">
                <div class="form-group d-flex align-items-center mb-0 pl-0">
                    <label class="control-label"> Thống kê: </label>
                    <div class="form__comboBox">
                        <form method="post">
                            <select name="combobox_Item" id="date-select">
                                <option value="day" selected> Theo ngày</option>
                                <option value="month"> Theo tháng</option>
                                <option value="year"> Theo năm</option>
                            </select>
                        </form>
                    </div>
                </div>
            </div>
            <div class="form__end col-6 d-flex align-items-center datetime">
                <div class="form-group d-flex align-items-center mb-0">
                    <form method="get" action="">
                        <label class="control-label">Từ:</label>
                        <input name="fromDate" onchange="submitForm()">
                    </form>
                </div>
                <div class="form-group2 d-flex align-items-center mb-0">
                    <form method="get" action="">
                        <label class="control-label">Đến:</label>
                        <input name="toDate" onchange="submitForm()">
                    </form>
                </div>
            </div>
        </div>
        <div class="infor__details">
            <div class="column__info-details">
                <div class="column__info-total d-flex">
                    <div class="column__total-offer text-center col-3">
                        <p class="order__amount"> Số đơn bán</p>
                        <p class="total__money-amount"> @Model.NumberOrder</p>
                    </div>
                    <div class="column__total-offer text-center col-3">
                        <p class="order__amount"> Số đơn nhập</p>
                        <p class="total__money-amount"> @Model.NumberIOrder</p>
                    </div>
                    <div class="column__total-profit col-5">
                        <p class="total__amount"> Tổng lợi nhuận</p>
                        <p class="total__money-amount"> @Model.TotalProfit.ToString("N0")VNĐ</p>
                    </div>
                </div>
                <div class="columns__chart">
                    <p class="total__amount-revenue"> Tổng doanh thu</p>
                    <p class="total__money-revenue"> @Model.TotalIncome.ToString("N0")VNĐ</p>
                    <canvas id="myChart"> </canvas>
                </div>
            </div>
            @*<div class="col-4">
            <div class="best__seller-info">
            <p class="title"> Bán chạy nhất</p>
            @foreach (var item in Model.List_Food)
            {
            cnt++;
            if (cnt == 4) break;
            <div class="d-flex align-items-center">
            <img src="@item.ImageFood" class="image_food_best_seller">
            <p class="foodname_best_seller">@item.FoodName</p>
            </div>
            }
            <canvas id="donutChart" class="chart_best_seller"> </canvas>
            </div>
            </div>*@
        </div>
    </div>
    <div class="form-box-revenue col-4">
        <div class="button-box-revenue">
            <div id="switch-btn-revenue"></div>
            <div class="toggle-btn-revenue">
                <button type="button" class="button-box__toggle-btn-revenue" id="best-seller-state" onclick="best()">Bán chạy nhất</button>
                <button type="button" class="button-box__toggle-btn-revenue" id="customer-vip-state" onclick="vip()">Khách hàng VIP</button>
            </div>
        </div>
        <div id="best_seller" class="input-group-revenue">
            <div class="best__seller-info">
                @foreach (var item in Model.List_Food)
                {
                    cnt++;
                    if (cnt == 4) break;
                    <div class="d-flex align-items-center">
                        <img src="@item.ImgFoodRevenue" class="image_food_best_seller">
                        <p class="foodname_best_seller">@item.NameFoodRevenue</p>
                    </div>
                }
                <canvas id="donutChart" class="chart_best_seller"> </canvas>
            </div>
        </div>

        <div id="cus_vip" class="input-group-revenue">
            <div class="best__seller-info">
                @foreach (var item in Model.List_CusRevenue)
                {
                    <div class="d-flex align-items-center" style="margin-top: 1%">
                        <img src="~/img/user.png" class="image_cus_vip">
                        <p class="foodname_best_seller">#@item.CusRevenueID @item.CusRevenueName</p>
                    </div>
                }
                <canvas id="barChart" class="chart_cus_vip"> </canvas>
            </div>
        </div>
    </div>
</div>
@*<script src="~/js/sync-revenue.js"></script>*@
<script>
    var x = document.getElementById("best_seller");
    var y = document.getElementById("cus_vip");
    var z = document.getElementById("switch-btn-revenue");

    function vip() {
        x.style.left = "-450px";
        y.style.left = "0px";
        z.style.left = "50%"
    }
    function best() {
        x.style.left = "0px"
        y.style.left = "450px";
        z.style.left = "0"
    }

    const selectBox = document.querySelector('select[name="combobox_Item"]');
    const fromDate = document.querySelector('input[name="fromDate"]');
    const toDate = document.querySelector('input[name="toDate"]');

    var urlParams = new URLSearchParams(window.location.search);
    var submittedFromDateValue = urlParams.get("fromDate");
    var submittedToDateValue = urlParams.get("toDate");

    // Kiểm tra submittedFromDateValue có định dạng ngày hay tháng
    var submittedFromDateIsDate = /^\d{4}-\d{2}-\d{2}$/.test(submittedFromDateValue);
    if (submittedFromDateIsDate) {
        selectBox.value = 'day';
        fromDate.type = 'date';
        toDate.type = 'date';
        fromDate.value = submittedFromDateValue;
        toDate.value = submittedToDateValue;
    } else {
        // Kiểm tra submittedFromDateValue có định dạng tháng hay không
        var submittedFromDateIsMonth = /^\d{4}-\d{2}$/.test(submittedFromDateValue);
        if (submittedFromDateIsMonth) {
            selectBox.value = 'month';
            fromDate.type = 'month';
            toDate.type = 'month';
            fromDate.value = submittedFromDateValue;
            toDate.value = submittedToDateValue;
        } else {
            selectBox.value = 'year';
            fromDate.type = 'number';
            toDate.type = 'number';
            fromDate.value = submittedFromDateValue;
            toDate.value = submittedToDateValue;
        } 
    }

    function updateFormFields() {
        if (selectBox.value === 'day') {
            fromDate.type = 'date';
            toDate.type = 'date';
        } else if (selectBox.value === 'month') {
            fromDate.type = 'month';
            toDate.type = 'month';
        } else if (selectBox.value === 'year') {
            fromDate.type = 'number';
            toDate.type = 'number';
        }
    }

    updateFormFields();

    selectBox.addEventListener('change', updateFormFields);

    function capitalizeFirstLetterOfEachWord(str) {
        return str.replace(/(^|\s)\S/g, function (char) {
            return char.toUpperCase();
        });
    }


	var Funds = [];
	var Profits = [];
	var Times = [];
	var Foodname = [];
	var Percent = [];
	var Cusname = [];
	var TMoney = [];
	var cnt = 0;

	@if (Model.List_IO.Count == 1 && Model.List_Ord.Count == 0)
	{
		@foreach (var item in Model.List_IO)
		{
			@:Funds.push(@item.TMoneyIO);
			@:Times.push('@item.DateIO.ToString("dd/MM/yyyy")');
			@:Profits.push(0);
		}
	} 
	@if (Model.List_Ord.Count == 1 && Model.List_IO.Count == 0)
	{
		@foreach (var item in Model.List_Ord)
		{
			@:Funds.push(0);
			@:Times.push('@item.SaleDate.ToString("dd/MM/yyyy")');
			@:Profits.push(@item.TotalMoney);
		}
	}
	@if (Model.List_IO.Count > 1 && Model.List_IO.Count > Model.List_Ord.Count)
	{

		@foreach (var item in Model.List_IO)
		{
			@:Funds.push(@item.TMoneyIO);
			@:Times.push('@item.DateIO.ToString("dd/MM/yyyy")');			
		}
		@foreach (var item in Model.List_Ord)
		{						
			@:Profits.push(@item.TotalMoney);
		}
		cnt = Model.List_IO.Count - Model.List_Ord.Count;
		for (var i = 0; i < cnt; i++)
		{
			@:Profits.push(0);
		}
	}
	@if (Model.List_Ord.Count > 1 && Model.List_Ord.Count > Model.List_IO.Count)
	{
		@foreach (var item in Model.List_Ord)
		{			
			@:Times.push('@item.SaleDate.ToString("dd/MM/yyyy")');
			@:Profits.push(@item.TotalMoney);
		}
		@foreach (var item in Model.List_IO)
		{
			@:Funds.push(@item.TMoneyIO);			
		}
		cnt = Model.List_Ord.Count - Model.List_IO.Count;
		for (var i = 0; i < cnt; i++)
		{
			@:Funds.push(0);
		}
	}
	@if (Model.List_Ord.Count == Model.List_IO.Count)
	{
		@foreach (var item in Model.List_Ord)
		{
			@:Times.push('@item.SaleDate.ToString("dd/MM/yyyy")');
			@:Profits.push(@item.TotalMoney);
		}
		@foreach (var item in Model.List_IO)
		{
			@:Funds.push(@item.TMoneyIO);
		}
	}
	@foreach (var item in Model.List_Food)
	{
		@:Foodname.push(capitalizeFirstLetterOfEachWord('@Html.Raw(item.NameFoodRevenue)'));
		@:Percent.push(@item.CntFoodRevenue);
	}
	@foreach (var item in Model.List_CusRevenue)
	{
		@:Cusname.push('#' + @item.CusRevenueID.ToString());
		@:TMoney.push(@item.CusRevenueTMoney);
	}
	
	/* Get the canvas element and context */
	var ctx = document.getElementById('myChart').getContext('2d');

    /* Define the data for the chart */
    var data = {
        labels: Times,
        datasets: [
            {
                label: 'Doanh thu',
                //backgroundColor: '#FA5230',
                borderColor: 'rgba(255, 99, 132, 1)',
                fill: false,
                //borderWidth: 1,
                data: Profits,
                tension: 0.4

            },
            {
                label: 'Vốn',
                //backgroundColor: '#E3E7FC',
                //borderWidth: 1,
                data: Funds,
                fill: false,
                tension: 0.4,
                borderColor: 'rgba(75, 192, 192, 1)'
                //borderRadius: [0, 10, 10, 0],
            }
        ]
    };

    /* Define the options for the chart */
    var options = {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        },
    };

    /* Create the chart */
    var myChart = new Chart(ctx, {
        type: 'line',
        data: data,
        options: options
    });

    var _ctx = document.getElementById('donutChart').getContext('2d');

    /* Define the data for the chart */
    var _data = {
        labels: Foodname,
        datasets: [{
            label: 'My First Dataset',
            data: Percent,
            backgroundColor: [
                'rgb(255, 99, 132)',
                'rgb(255, 159, 64)',
                'rgb(255, 205, 86)',
                'rgb(75, 192, 192)',
                'rgb(54, 162, 235)'
            ],
            hoverOffset: 4
        }]
    };

    /* Create the chart */
    var myChart = new Chart(_ctx, {
        type: 'pie',
        data: _data,
    });

    var __ctx = document.getElementById('barChart').getContext('2d');

    /* Define the data for the chart */
    var __data = {
        labels: Cusname,
        datasets: [{
            label: 'Tổng tiền',
            data: TMoney,
            backgroundColor: [
                'rgba(255, 99, 132)',
                'rgba(255, 159, 64)',
                'rgba(255, 205, 86)',
                'rgba(75, 192, 192)',
                'rgba(54, 162, 235)'
            ],
            borderColor: [
                'rgb(255, 99, 132)',
                'rgb(255, 159, 64)',
                'rgb(255, 205, 86)',
                'rgb(75, 192, 192)',
                'rgb(54, 162, 235)'
            ],
            borderWidth: 1
        }]
    };

    /* Create the chart */
    var myChart = new Chart(__ctx, {
        type: 'bar',
        data: __data,
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
    });
</script>
<script>
	function submitForm() {
		const fromDateInput = document.getElementsByName("fromDate")[0];
		const toDateInput = document.getElementsByName("toDate")[0];
		const selectElement = document.getElementById("date-select");

		const selectOption = selectElement.value;
		const fromDateValue = fromDateInput.value;
		const toDateValue = toDateInput.value;
				
		if (fromDateValue && toDateValue) {
			// Tạo URL mới với các tham số fromDate và toDate
			const url = new URL(window.location.href);
			url.searchParams.set("fromDate", fromDateValue);
			url.searchParams.set("toDate", toDateValue);
			url.searchParams.set("selectOption", selectOption);
			
			// Chuyển hướng trình duyệt đến URL mới
			window.location.href = url.toString();
		}		
	}
    fromDate.addEventListener('keyup', function (event) {
        if (event.keyCode === 13) { // Check if Enter key is pressed
            toDate.focus(); // Move focus to toDate field
        }
    });

    toDate.addEventListener('keyup', function (event) {
        if (event.keyCode === 13) { // Check if Enter key is pressed
            submitForm(event); // Call submitForm function
        }
    });
</script>





