@page
@model SyncRevenueModel
@{
	ViewData["Title"] = "SyncRevenue";
}
<link rel="stylesheet" href="~/css/sync-revenue.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>

<div class="main__information">	
	<div class="main__information-detail" style="margin-top: 30px;">
		<div class="main__table-form d-flex align-items-end">
			<div class="select__form col-4 ">
				<div class="form-group d-flex align-items-center mb-0">
					<label class="control-label" style="padding-bottom: 2px"> Thống kê: </label>
					<div class="form__comboBox">
						<form method="post">
							<select name="combobox_Item" id="date-select">
								<option value="day" selected> Theo ngày</option>
								<option value="month"> Theo tháng</option>
								@*<option value="year"> Theo năm</option>*@
							</select>
						</form>
					</div>
				</div>
			</div>
			<div class="form__end col-4 d-flex align-items-center datetime">
				<div class="form-group d-flex align-items-center mb-0">
					<form method="get" action="">
						<label class="control-label">Từ:</label>
						<input name="fromDate" onchange="submitForm()">						
					</form>
				</div>
				<div class="form-group2 d-flex align-items-center mb-0">
					<form method="get" action="">
						<label class="control-label">Đến:</label>
						<input name="toDate" onchange="submitForm()">						
					</form>
				</div>
			</div>
		</div>
		<div class="infor__details d-flex">
			<div class="column__info-details col-8">
				<div class="column__info-total d-flex">
					<div class="column__total-offer text-center col-3">
						<p class="order__amount"> Số lượng đơn bán</p>
						<p class="total__money-amount"> @Model.NumberOrder</p>
					</div>
					<div class="column__total-offer text-center col-3">
						<p class="order__amount"> Số lượng đơn nhập</p>
						<p class="total__money-amount"> @Model.NumberIOrder</p>
					</div>
					<div class="column__total-profit col-5">
						<p class="total__amount"> Tổng lợi nhuận</p>
						<p class="total__money-amount"> @Model.TotalProfit.ToString("N0")VNĐ</p>
					</div>
				</div>
				<div class="columns__chart">
					<p class="total__amount-revenue"> Tổng doanh thu</p>
					<p class="total__money-revenue"> @Model.TotalIncome.ToString("N0")VNĐ</p>
					<canvas id="myChart"> </canvas>
				</div>
			</div>			
			<div class="best__seller-info col-4">
				<p class="title"> Bán chạy nhất</p>
				@foreach (var item in Model.List_Food)
				{
					<div class="d-flex align-items-center">
						<img src="@item.ImageFood" style="width: 25%; height: 25%">
						<p style="margin-left: 3%; text-transform: capitalize; font-size: 1.8rem">@item.FoodName</p>
					</div>
				}				
			</div>
		</div>
	</div>
</div>
@*<script src="~/js/sync-revenue.js"></script>*@
<script>
	const selectBox = document.querySelector('select[name="combobox_Item"]');
	const fromDate = document.querySelector('input[name="fromDate"]');
	const toDate = document.querySelector('input[name="toDate"]');

	var urlParams = new URLSearchParams(window.location.search);
	var submittedFromDateValue = urlParams.get("fromDate");
	var submittedToDateValue = urlParams.get("toDate");

	// Kiểm tra submittedFromDateValue có định dạng ngày hay tháng
	var submittedFromDateIsDate = /^\d{4}-\d{2}-\d{2}$/.test(submittedFromDateValue);	
	if (submittedFromDateIsDate) {
		selectBox.value = 'day';
		fromDate.type = 'date';
		toDate.type = 'date';
		fromDate.value = submittedFromDateValue;
		toDate.value = submittedToDateValue;
	} else {
		// Kiểm tra submittedFromDateValue có định dạng tháng hay không
		var submittedFromDateIsMonth = /^\d{4}-\d{2}$/.test(submittedFromDateValue);
		if (submittedFromDateIsMonth) {
			selectBox.value = 'month';
			fromDate.type = 'month';
			toDate.type = 'month';
			fromDate.value = submittedFromDateValue;
			toDate.value = submittedToDateValue;
		}
	}		

	function updateFormFields() {
		if (selectBox.value === 'day') {
			fromDate.type = 'date';
			toDate.type = 'date';
		} else if (selectBox.value === 'month') {
			fromDate.type = 'month';
			toDate.type = 'month';
		} 
		//else if (selectBox.value === 'year') {
		//	fromDate.type = 'number'; 
		//	toDate.type = 'number'; 	
		//}		
	}
	
	updateFormFields();

	selectBox.addEventListener('change', updateFormFields);

	var Funds = [];
	var Profits = [];
	var Times = [];

	@foreach (var item in Model.List_IO)
	{		
		@:Times.push('@item.DateIO.ToString("dd/MM/yyyy")');		
		@:Funds.push(@item.TMoneyIO);
	}
	@foreach (var item in Model.List_Ord)
	{
		@:Profits.push(@item.TotalMoney);
	}	

	/* Get the canvas element and context */
	var ctx = document.getElementById('myChart').getContext('2d');

	/* Define the data for the chart */
	var data = {
		labels: Times,
		datasets: [
			{
				label: 'Doanh thu',
				//backgroundColor: '#FA5230',
				borderColor: 'rgba(255, 99, 132, 1)',
				fill: false,
				//borderWidth: 1,
				data: Profits,
				tension: 0.1

			},
			{
				label: 'Vốn',
				//backgroundColor: '#E3E7FC',
				//borderWidth: 1,
				data: Funds,
				fill: false,
				tension: 0.1,
				borderColor: 'rgba(75, 192, 192, 1)'
				//borderRadius: [0, 10, 10, 0],
			}
		]
	};

	/* Define the options for the chart */
	var options = {
		scales: {
			yAxes: [{
				ticks: {
					beginAtZero: true
				}
			}]
		},
	};

	/* Create the chart */
	var myChart = new Chart(ctx, {
		type: 'line',
		data: data,
		options: options
	});
</script>
<script>
	function submitForm() {
		const fromDateInput = document.getElementsByName("fromDate")[0];
		const toDateInput = document.getElementsByName("toDate")[0];

		const fromDateValue = fromDateInput.value;
		const toDateValue = toDateInput.value;
				
		if (fromDateValue && toDateValue) {
			// Tạo URL mới với các tham số fromDate và toDate
			const url = new URL(window.location.href);
			url.searchParams.set("fromDate", fromDateValue);
			url.searchParams.set("toDate", toDateValue);
			
			// Chuyển hướng trình duyệt đến URL mới
			window.location.href = url.toString();
		}		
	}
</script>
<script>
	// Lắng nghe sự kiện thay đổi ngày và gọi lại hàm vẽ biểu đồ
	const fromDateInput = document.querySelector('input[name="fromDate"]');
	const toDateInput = document.querySelector('input[name="toDate"]');
	fromDateInput.addEventListener('input', drawChart);
	toDateInput.addEventListener('input', drawChart);

	// Hàm vẽ biểu đồ
	function drawChart() {
		// Lấy dữ liệu từ máy chủ
		const fromDate = fromDateInput.value;
		const toDate = toDateInput.value;
		const url = `/api/data?fromDate=${fromDate}&toDate=${toDate}`;
		fetch(url)
			.then(response => response.json())
			.then(data => {
				// Tính toán các giá trị cho trục x và y của biểu đồ
				const startDate = new Date(fromDate);
				const endDate = new Date(toDate);
				const labels = [];
				const profitData = [];
				const fundData = [];
				let currentDate = startDate;
				while (currentDate <= endDate) {
					const dateString = currentDate.toISOString().substring(0, 10);
					labels.push(dateString);
					const dataInDateRange = data.filter(item => item.date === dateString);
					if (dataInDateRange.length > 0) {
						const profitTotal = dataInDateRange.reduce((acc, item) => acc + item.profit, 0);
						const profitAvg = profitTotal / dataInDateRange.length;
						profitData.push(profitAvg);
						const fundTotal = dataInDateRange.reduce((acc, item) => acc + item.fund, 0);
						const fundAvg = fundTotal / dataInDateRange.length;
						fundData.push(fundAvg);
					} else {
						profitData.push(null);
						fundData.push(null);
					}
					currentDate.setDate(currentDate.getDate() + 1);
				}

				// Cập nhật dữ liệu biểu đồ
				const chartData = {
					labels: labels,
					datasets: [
						{
							label: 'Profit',
							borderColor: 'rgba(255, 99, 132, 1)',
							fill: false,
							data: profitData,
							tension: 0.1
						},
						{
							label: 'Funds',
							borderColor: 'rgba(75, 192, 192, 1)',
							fill: false,
							data: fundData,
							tension: 0.1
						}
					]
				};

				// Cập nhật biểu đồ
				const ctx = document.getElementById('myChart').getContext('2d');
				const myChart = new Chart(ctx, {
					type: 'line',
					data: chartData,
					options: options
				});
			})
			.catch(error => console.error(error));
</script>







